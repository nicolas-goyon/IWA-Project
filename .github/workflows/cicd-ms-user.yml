name: MS_USER CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  JAVA_VERSION: '21'
  PROJECT_PATH: ms_user
  MICROSERVICE_NAME: ms_user

jobs:
    build-and-test:
      runs-on: ubuntu-latest
  
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
  
      - name: Create a network
        run: docker network create iwa_network || true

      - name: Add project path to .env
        run: echo "PROJECT_PATH=${{ env.PROJECT_PATH }}" >> ${{ env.PROJECT_PATH }}/.env

      - name: run docker-compose of db and tests
        run: |
          cd ${{ env.PROJECT_PATH }}
          docker-compose -f docker-compose.yml up -d db
          docker-compose -f docker-compose.yml up tests || true

      - name: Clean up
        run: |
          cd ${{ env.PROJECT_PATH }}
          docker-compose -f docker-compose.yml down

    #   - name: Build Docker image
    #     run: |
    #         cd ${{ env.PROJECT_PATH }}
    #         docker build -t testing_image:latest -f Dockerfile.test .
  
    #   - name: Run tests
    #     run: |
    #         cd ${{ env.PROJECT_PATH }}
    #         docker run --name testing_container --env-file .env testing_image:latest
    #         docker cp testing_container:/app/reports ./reports
    #         docker rm testing_container
  
    #   - name: Upload test reports
    #     uses: actions/upload-artifact@v3
    #     with:
    #         name: test-reports
    #         path: ./reports
  
    #   - name: Clean up
    #     run: docker rmi testing_image:latest
  
    build-app:
        runs-on: ubuntu-22.04
        needs: build-and-test
    
        steps:
        - name: Checkout code
          uses: actions/checkout@v3
    
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
    
        - name: Install docker-compose
          run: |
            sudo apt-get update
            sudo apt-get install -y docker-compose
    
        - name: Build application Docker image
          run: |
            cd ${{ env.PROJECT_PATH }}
            docker-compose -f docker-compose.yml build app
    
    build-db:
        runs-on: ubuntu-22.04
        needs: build-and-test

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Install docker-compose
          run: |
            sudo apt-get update
            sudo apt-get install -y docker-compose

        - name: Build database Docker image
          run: |
            cd ${{ env.PROJECT_PATH }}
            docker-compose -f docker-compose.yml build db

    push-app-db:
        runs-on: ubuntu-22.04
        needs: [build-app, build-db]

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        - name: Install docker-compose
          run: |
            sudo apt-get update
            sudo apt-get install -y docker-compose

        - name: Tag and push Docker images to GitHub Container Registry
          run: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Tag and push the application image
            docker tag ${{ env.MICROSERVICE_NAME }}-app:latest ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-app:latest
            docker push ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-app:latest

            # Tag and push the database image
            docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-db:latest
            docker push ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-db:latest
    
  