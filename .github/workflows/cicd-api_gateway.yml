name: API_GATEWAY CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  JAVA_VERSION: '21'
  PROJECT_PATH: api_gateway
  MICROSERVICE_NAME: api_gateway

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


    - name: Change permissions for gradlew
      run: chmod +x ${{ env.PROJECT_PATH }}/gradlew
    
    - name: Run unit tests
      run: cd ${{ env.PROJECT_PATH }} && ./gradlew clean test --scan

  build:
    runs-on: ubuntu-22.04
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Change permissions for gradlew
      run: chmod +x ${{ env.PROJECT_PATH }}/gradlew

    - name: Build JAR file
      run: cd ${{ env.PROJECT_PATH }} && ./gradlew clean build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.MICROSERVICE_NAME }}-build
        path: ${{ env.PROJECT_PATH }}/build/libs/*.jar

  deploy:
    runs-on: ubuntu-22.04
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.MICROSERVICE_NAME }}-build
        path: ${{ env.PROJECT_PATH }}/build/libs

    - name: Deploy to test environment
      run: |
        # Add your deployment commands here
        # For example, if you are deploying to a Kubernetes cluster:
        # kubectl apply -f deployment.yaml
        echo "Deploying MS1 to test environment..."
