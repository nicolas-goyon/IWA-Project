name: API_GATEWAY CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
  JAVA_VERSION: '21'
  PROJECT_PATH: api_gateway
  MICROSERVICE_NAME: api_gateway

jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Build Docker image
#       run: |
#           cd ${{ env.PROJECT_PATH }}
#           docker build -t testing_image:latest -f Dockerfile.test .

#     - name: Run tests
#       run: |
#           cd ${{ env.PROJECT_PATH }}
#           docker run --name testing_container --env-file .env testing_image:latest
#           docker cp testing_container:/app/reports ./reports
#           docker rm testing_container

#     - name: Upload test reports
#       uses: actions/upload-artifact@v3
#       with:
#           name: test-reports
#           path: ./reports

#     - name: Clean up
#       run: docker rmi testing_image:latest

  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: run docker-compose of db and tests
      run: |
        cd ${{ env.PROJECT_PATH }}
        docker-compose -f docker-compose.yml up tests || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.MICROSERVICE_NAME }}-tests-reports
        path: ${{ env.PROJECT_PATH }}/reports

    - name: Clean up
      run: |
        cd ${{ env.PROJECT_PATH }}
        docker-compose -f docker-compose.yml down

  # build:
  #   runs-on: ubuntu-22.04
  #   needs: build-and-test

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up JDK ${{ env.JAVA_VERSION }}
  #     uses: actions/setup-java@v3
  #     with:
  #       distribution: 'temurin'
  #       java-version: ${{ env.JAVA_VERSION }}

  #   - name: Build Docker image
  #     run: |
  #       cd ${{ env.PROJECT_PATH }}
  #       docker build -t ${{ env.MICROSERVICE_NAME}}:latest .

  #   - name: Push Docker image to GitHub Container Registry
  #     run: |
  #       echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #       docker tag ${{ env.MICROSERVICE_NAME }}:latest ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}:latest
  #       docker push ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}:latest

  build-app:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: build app
      run: |
        cd ${{ env.PROJECT_PATH }}
        docker-compose -f docker-compose.yml build app

    - name: Tag Docker images
      run: |
        docker tag app ${{ env.MICROSERVICE_NAME }}-app:build

    - name: Save Docker images
      run: |
        docker save ${{ env.MICROSERVICE_NAME }}-app:build -o ${{ env.MICROSERVICE_NAME }}-app-image.tar

    - name: Upload Docker images as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.MICROSERVICE_NAME }}-app-image

  push-app:
    runs-on: ubuntu-22.04
    needs: [build-app]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install docker-compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Download App Docker images
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.MICROSERVICE_NAME }}-app-image

    - name: Load Docker images
      run: |
        docker load -i ${{ env.MICROSERVICE_NAME }}-app-image.tar

    - name: Push Docker images to GitHub Container Registry
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

        # Push the application image
        docker push ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-app:latest