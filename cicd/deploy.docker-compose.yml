# Image names are in the format ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-app:latest
# The database image name is in the format ghcr.io/${{ github.repository_owner }}/${{ env.MICROSERVICE_NAME }}-db:latest

# Microservices names
# - ms_user
# - ms_reservation
# - ms_location
# - ms_notification

# API Gateway
# - api_gateway

# Repository owner
# - nicolas-goyon

# Dockercompose for deployment, images are already built and pushed to ghcr.io
# The all microservice got a db and app image
# Only the api has a exposed port
# All microservices have its own network for the communication between the db and app
# All microservice depends on the db image
# The microservices and the api_gateway are in the same network
# The exposed port is in the .env file as API_GATEWAY_PORT and API_GATEWAY_PUBLIC_PORT
services:
  api_gateway:
    container_name: api_gateway
    image: ghcr.io/nicolas-goyon/api_gateway-app:latest
    ports:
      - ${API_GATEWAY_PUBLIC_PORT}:${API_GATEWAY_PORT}
    networks:
      - iwa_network
    depends_on:
      - ms_user

  ms_user:
    container_name: ms-user
    image: ghcr.io/nicolas-goyon/ms_user-app:latest
    networks:
      - iwa_network
      - iwa_network_user
    depends_on:
      - ms_user-db

  ms_user-db:
    container_name: ms_user-db
    image: ghcr.io/nicolas-goyon/ms_user-db:latest
    networks:
      - iwa_network_user
  
  # ms_reservation:
  #   container_name: ms_reservation
  #   image: ghcr.io/nicolas-goyon/ms_reservation-app:latest
  #   networks:
  #     - iwa_network
  #   depends_on:
  #     - ghcr.io/nicolas-goyon/ms_reservation-db:latest
    
# Create a network
networks:
  iwa_network:
  iwa_network_user:


